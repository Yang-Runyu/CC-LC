#include "global_arithmetic.h"

Arithmetic_Codec acodec;
Adaptive_Data_Model aColor0;
Adaptive_Data_Model aColor1;
Adaptive_Data_Model a3OT_L(3);
Adaptive_Data_Model a3OT_A(3);
Adaptive_Data_Model a3OT_B(3);
Adaptive_Data_Model a3OT_R(3);
Adaptive_Data_Model a3OT_0(3);
Adaptive_Data_Model a3OT_1(3);
Adaptive_Data_Model a3OT_2(3);
Adaptive_Data_Model a3OT_00(3);
Adaptive_Data_Model a3OT_01(3);
Adaptive_Data_Model a3OT_02(3);
Adaptive_Data_Model a3OT_10(3);
Adaptive_Data_Model a3OT_11(3);
Adaptive_Data_Model a3OT_12(3);
Adaptive_Data_Model a3OT_20(3);
Adaptive_Data_Model a3OT_21(3);
Adaptive_Data_Model a3OT_22(3);
Adaptive_Data_Model a3OT_000(3);
Adaptive_Data_Model a3OT_001(3);
Adaptive_Data_Model a3OT_002(3);
Adaptive_Data_Model a3OT_010(3);
Adaptive_Data_Model a3OT_011(3);
Adaptive_Data_Model a3OT_012(3);
Adaptive_Data_Model a3OT_020(3);
Adaptive_Data_Model a3OT_021(3);
Adaptive_Data_Model a3OT_022(3);
Adaptive_Data_Model a3OT_100(3);
Adaptive_Data_Model a3OT_101(3);
Adaptive_Data_Model a3OT_102(3);
Adaptive_Data_Model a3OT_110(3);
Adaptive_Data_Model a3OT_111(3);
Adaptive_Data_Model a3OT_112(3);
Adaptive_Data_Model a3OT_120(3);
Adaptive_Data_Model a3OT_121(3);
Adaptive_Data_Model a3OT_122(3);
Adaptive_Data_Model a3OT_200(3);
Adaptive_Data_Model a3OT_201(3);
Adaptive_Data_Model a3OT_202(3);
Adaptive_Data_Model a3OT_210(3);
Adaptive_Data_Model a3OT_211(3);
Adaptive_Data_Model a3OT_212(3);
Adaptive_Data_Model a3OT_220(3);
Adaptive_Data_Model a3OT_221(3);
Adaptive_Data_Model a3OT_222(3);
Adaptive_Data_Model aPredictPositionMode(3);
Adaptive_Data_Model aSideMode(4);
Adaptive_Data_Model aFlag1(3);
Adaptive_Data_Model aFlag2(3);
Adaptive_Data_Model aFlag3(3);
Adaptive_Bit_Model ahead;
Adaptive_Bit_Model aSplitFlag1;
Adaptive_Bit_Model aSplitFlag2;
Adaptive_Bit_Model aSplitFlag3;
Adaptive_Bit_Model aSplitCTU1;
Adaptive_Bit_Model aSplitCTU2;
Adaptive_Bit_Model aPCM;
Adaptive_Bit_Model aOneColorFlag1;
Adaptive_Bit_Model aOneColorFlag2;
Adaptive_Bit_Model aOneColorFlag3;
Adaptive_Bit_Model aOneColorFlag21;
Adaptive_Bit_Model aOneColorFlag22;
Adaptive_Bit_Model aOneColorFlag23;
Adaptive_Bit_Model aPredictColor1Flag;
Adaptive_Bit_Model aPredictColor1Flag2;
Adaptive_Bit_Model aPredictColor2Flag;
Adaptive_Bit_Model aPredictColorRunFlag;
Adaptive_Bit_Model aContinueEdgeFlag1;
Adaptive_Bit_Model aContinueEdgeFlag2;
Adaptive_Bit_Model aContinueEdgeFlag3;
Adaptive_Bit_Model aPredictPosition;
Adaptive_Bit_Model aPredictPositionFlag;
Adaptive_Bit_Model aPredictPositionBorder;
Adaptive_Bit_Model aPredictPositionSide;
Adaptive_Bit_Model aGolomb;
int offset_3OT_L = 0;
int offset_3OT_A = 3;
int offset_3OT_B = 6;
int offset_3OT_R = 9;
int offset_3OT_0 = 12;
int offset_3OT_1 = 15;
int offset_3OT_2 = 18;
int offset_3OT_00 = 21;
int offset_3OT_01 = 24;
int offset_3OT_02 = 27;
int offset_3OT_10 = 30;
int offset_3OT_11 = 33;
int offset_3OT_12 = 36;
int offset_3OT_20 = 39;
int offset_3OT_21 = 42;
int offset_3OT_22 = 45;
int offset_3OT_000 = 48;
int offset_3OT_001 = 51;
int offset_3OT_002 = 54;
int offset_3OT_010 = 57;
int offset_3OT_011 = 60;
int offset_3OT_012 = 63;
int offset_3OT_020 = 66;
int offset_3OT_021 = 69;
int offset_3OT_022 = 72;
int offset_3OT_100 = 75;
int offset_3OT_101 = 78;
int offset_3OT_102 = 81;
int offset_3OT_110 = 84;
int offset_3OT_111 = 87;
int offset_3OT_112 = 90;
int offset_3OT_120 = 93;
int offset_3OT_121 = 96;
int offset_3OT_122 = 99;
int offset_3OT_200 = 102;
int offset_3OT_201 = 105;
int offset_3OT_202 = 108;
int offset_3OT_210 = 111;
int offset_3OT_211 = 114;
int offset_3OT_212 = 117;
int offset_3OT_220 = 120;
int offset_3OT_221 = 123;
int offset_3OT_222 = 126;
int offset_PredictPositionMode = 129;
int offset_SideMode = 132;
int offset_Flag1 = 136;
int offset_Flag2 = 139;
int offset_Flag3 = 142;
int offset_head = 145;
int offset_SplitFlag1 = 147;
int offset_SplitFlag2 = 149;
int offset_SplitFlag3 = 151;
int offset_OneColorFlag1 = 153;
int offset_OneColorFlag2 = 155;
int offset_OneColorFlag3 = 157;
int offset_OneColorFlag21 = 159;
int offset_OneColorFlag22 = 161;
int offset_OneColorFlag23 = 163;
int offset_PredictColor1Flag = 165;
int offset_PredictColor1Flag2 = 167;
int offset_PredictColor2Flag =  169;
int offset_PredictColorRunFlag = 171;
int offset_ContinueEdgeFlag1 = 173;
int offset_ContinueEdgeFlag2 = 175;
int offset_ContinueEdgeFlag3 = 177;
int offset_PredictPosition = 179;
int offset_PredictPositionFlag = 181;
int offset_PredictPositionBorder = 183;
int offset_PredictPositionSide = 185;
int offset_Golomb = 187;
int offset_PCM = 189;


int g_max_CU = 32;
int g_min_CU = 4;
int PCM_threshold = 2;
int* depthMap;
int numC;
int g_adapt;
int splitCTU_flag;
int splitCTU_context;
int bytes;
int PCM_flag = 0;

unsigned char* adapt_map;
unsigned char* adapt_point;

int g_value;
int g_count=0;
bool encode_numC;

int mask_flag = 0;
unsigned char* mask = NULL;

void reset_arithmetic()
{
  //aColor0.reset();
  //a3OT_L.reset();
  //a3OT_A.reset();
  //a3OT_B.reset();
  //a3OT_R.reset();
  //a3OT_0.reset();
  //a3OT_1.reset();
  //a3OT_2.reset();
  //a3OT_00.reset();
  //a3OT_01.reset();
  //a3OT_02.reset();
  //a3OT_10.reset();
  //a3OT_11.reset();
  //a3OT_12.reset();
  //a3OT_20.reset();
  //a3OT_21.reset();
  //a3OT_22.reset();
  //a3OT_000.reset();
  //a3OT_001.reset();
  //a3OT_002.reset();
  //a3OT_010.reset();
  //a3OT_011.reset();
  //a3OT_012.reset();
  //a3OT_020.reset();
  //a3OT_021.reset();
  //a3OT_022.reset();
  //a3OT_100.reset();
  //a3OT_101.reset();
  //a3OT_102.reset();
  //a3OT_110.reset();
  //a3OT_111.reset();
  //a3OT_112.reset();
  //a3OT_120.reset();
  //a3OT_121.reset();
  //a3OT_122.reset();
  //a3OT_200.reset();
  //a3OT_201.reset();
  //a3OT_202.reset();
  //a3OT_210.reset();
  //a3OT_211.reset();
  //a3OT_212.reset();
  //a3OT_220.reset();
  //a3OT_221.reset();
  //a3OT_222.reset();
  //aPredictPositionMode.reset();
  //aSideMode.reset();
  //aFlag1.reset();
  //aFlag2.reset();
  //aFlag3.reset();
  //aSplitFlag1.reset();
  //aSplitFlag2.reset();
  //aSplitFlag3.reset();
  //aSplitCTU1.reset();
  //aSplitCTU2.reset();
  //aOneColorFlag1.reset();
  //aOneColorFlag2.reset();
  //aOneColorFlag3.reset();
  //aOneColorFlag21.reset();
  //aOneColorFlag22.reset();
  //aOneColorFlag23.reset();
  //aPredictColor1Flag.reset();
  //aPredictColor1Flag2.reset();
  //aPredictColor2Flag.reset();
  //aContinueEdgeFlag1.reset();
  //aContinueEdgeFlag2.reset();
  //aContinueEdgeFlag3.reset();
  //aPredictPosition.reset();
  //aPredictPositionFlag.reset();
  //aPredictPositionBorder.reset();
  //aPredictPositionSide.reset();
  //aGolomb.reset();

	aPCM.reset();
	aPredictColorRunFlag.reset();
}

void copy_arithmetic(int* count_list)
{
	//a3OT_L.copy(count_list);
	//a3OT_A.copy(count_list + offset_3OT_A);
	//a3OT_B.copy(count_list + offset_3OT_B);
	//a3OT_R.copy(count_list + offset_3OT_R);
	//a3OT_0.copy(count_list + offset_3OT_0);
	//a3OT_1.copy(count_list + offset_3OT_1);
	//a3OT_2.copy(count_list + offset_3OT_2);
	//a3OT_00.copy(count_list + offset_3OT_00);
	//a3OT_01.copy(count_list + offset_3OT_01);
	//a3OT_02.copy(count_list + offset_3OT_02);
	//a3OT_10.copy(count_list + offset_3OT_10);
	//a3OT_11.copy(count_list + offset_3OT_11);
	//a3OT_12.copy(count_list + offset_3OT_12);
	//a3OT_20.copy(count_list + offset_3OT_20);
	//a3OT_21.copy(count_list + offset_3OT_21);
	//a3OT_22.copy(count_list + offset_3OT_22);
	//a3OT_000.copy(count_list + offset_3OT_000);
	//a3OT_001.copy(count_list + offset_3OT_001);
	//a3OT_002.copy(count_list + offset_3OT_002);
	//a3OT_010.copy(count_list + offset_3OT_010);
	//a3OT_011.copy(count_list + offset_3OT_011);
	//a3OT_012.copy(count_list + offset_3OT_012);
	//a3OT_020.copy(count_list + offset_3OT_020);
	//a3OT_021.copy(count_list + offset_3OT_021);
	//a3OT_022.copy(count_list + offset_3OT_022);
	//a3OT_100.copy(count_list + offset_3OT_100);
	//a3OT_101.copy(count_list + offset_3OT_101);
	//a3OT_102.copy(count_list + offset_3OT_102);
	//a3OT_110.copy(count_list + offset_3OT_110);
	//a3OT_111.copy(count_list + offset_3OT_111);
	//a3OT_112.copy(count_list + offset_3OT_112);
	//a3OT_120.copy(count_list + offset_3OT_120);
	//a3OT_121.copy(count_list + offset_3OT_121);
	//a3OT_122.copy(count_list + offset_3OT_122);
	//a3OT_200.copy(count_list + offset_3OT_200);
	//a3OT_201.copy(count_list + offset_3OT_201);
	//a3OT_202.copy(count_list + offset_3OT_202);
	//a3OT_210.copy(count_list + offset_3OT_210);
	//a3OT_211.copy(count_list + offset_3OT_211);
	//a3OT_212.copy(count_list + offset_3OT_212);
	//a3OT_220.copy(count_list + offset_3OT_220);
	//a3OT_221.copy(count_list + offset_3OT_221);
	//a3OT_222.copy(count_list + offset_3OT_222);
	//aPredictPositionMode.copy(count_list + offset_PredictPositionMode);
	//aSideMode.copy(count_list + offset_SideMode);
	if (count_list[offset_Flag1] + count_list[offset_Flag1+1] + count_list[offset_Flag1+2] + count_list[offset_Flag1+3] + count_list[offset_Flag1+4] + count_list[offset_Flag1+5] + count_list[offset_Flag1+6] + count_list[offset_Flag1+7] + count_list[offset_Flag1+8] >= 64)
	{
		aFlag1.copy(count_list + offset_Flag1);
		aFlag2.copy(count_list + offset_Flag2);
		aFlag3.copy(count_list + offset_Flag3);
	}
	//if (count_list[offset_PCM] + count_list[offset_PCM + 1] >= 60)
	//{
	//	aPCM1.copy(count_list + offset_PCM);
	//}
	//aSplitFlag1.copy(count_list + offset_SplitFlag1);
	//aSplitFlag2.copy(count_list + offset_SplitFlag2);
	//aSplitFlag3.copy(count_list + offset_SplitFlag3);
	//aOneColorFlag1.copy(count_list + offset_OneColorFlag1);
	//aOneColorFlag2.copy(count_list + offset_OneColorFlag2);
	//aOneColorFlag3.copy(count_list + offset_OneColorFlag3);
	//aOneColorFlag21.copy(count_list + offset_OneColorFlag21);
	//aOneColorFlag22.copy(count_list + offset_OneColorFlag22);
	//aOneColorFlag23.copy(count_list + offset_OneColorFlag23);
	//aPredictColor1Flag.copy(count_list + offset_PredictColor1Flag);
	//aPredictColor1Flag2.copy(count_list + offset_PredictColor1Flag2);
	//aPredictColor2Flag.copy(count_list + offset_PredictColor2Flag);
	aPredictColorRunFlag.copy(count_list + offset_PredictColorRunFlag);
	//aContinueEdgeFlag1.copy(count_list + offset_ContinueEdgeFlag1);
	//aContinueEdgeFlag2.copy(count_list + offset_ContinueEdgeFlag2);
	//aContinueEdgeFlag3.copy(count_list + offset_ContinueEdgeFlag3);
	//aPredictPosition.copy(count_list + offset_PredictPosition);
	//aPredictPositionFlag.copy(count_list + offset_PredictPositionFlag);
	//aPredictPositionBorder.copy(count_list + offset_PredictPositionBorder);
	//aPredictPositionSide.copy(count_list + offset_PredictPositionSide);
	//aGolomb.copy(count_list + offset_Golomb);
}